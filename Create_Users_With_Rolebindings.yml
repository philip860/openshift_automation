---
- hosts: localhost
  gather_facts: false
  vars_files:
    - files/users.yml

  vars:
    role_map:
      admin: admin
      developer: edit

    kubeconfig_path: "~/.kube/config"
    validate_certs: false

  module_defaults:
    kubernetes.core.k8s:
      kubeconfig: "{{ kubeconfig_path }}"
      validate_certs: "{{ validate_certs }}"
    kubernetes.core.k8s_info:
      kubeconfig: "{{ kubeconfig_path }}"
      validate_certs: "{{ validate_certs }}"

  tasks:
    # 1) Gather info: OpenShift User objects
    - name: Lookup OpenShift User objects
      kubernetes.core.k8s_info:
        api_version: user.openshift.io/v1
        kind: User
        name: "{{ item.name }}"
      loop: "{{ users }}"
      loop_control:
        index_var: idx
      register: users_info
      failed_when: false

    # 2) Gather info: Namespaces
    - name: Lookup Namespaces
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Namespace
        name: "{{ item.name }}"
      loop: "{{ users }}"
      loop_control:
        index_var: idx
      register: ns_info_all
      failed_when: false

    # 3) Report (check mode) namespace creation
    - name: WOULD CREATE Namespace (check mode)
      debug:
        msg: "WOULD CREATE Namespace '{{ item.name }}' (does not exist)"
      loop: "{{ users }}"
      loop_control:
        index_var: idx
      when:
        - ansible_check_mode
        - (ns_info_all.results[idx].resources | default([]) | length) == 0

    # 4) Create namespace (real run)
    - name: Create Namespace if missing
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: "{{ item.name }}"
      loop: "{{ users }}"
      loop_control:
        index_var: idx
      when:
        - not ansible_check_mode
        - (ns_info_all.results[idx].resources | default([]) | length) == 0

    # 5) Warn if User doesn't exist yet
    - name: Warn when OpenShift User is missing
      debug:
        msg: "OpenShift User '{{ item.name }}' not found. Skipping RoleBinding. Ask the user to log in once."
      loop: "{{ users }}"
      loop_control:
        index_var: idx
      when: (users_info.results[idx].resources | default([]) | length) == 0

    # 6) Report (check mode) rolebinding creation
    - name: WOULD CREATE RoleBinding (check mode)
      debug:
        msg: "WOULD CREATE RoleBinding in ns '{{ item.name }}' for user '{{ item.name }}' with ClusterRole '{{ role_map[item.role] | default('view') }}'"
      loop: "{{ users }}"
      loop_control:
        index_var: idx
      when:
        - ansible_check_mode
        - (users_info.results[idx].resources | default([]) | length) > 0

    # 7) Create rolebinding (real run) only if user exists
    - name: Create RoleBinding
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: rbac.authorization.k8s.io/v1
          kind: RoleBinding
          metadata:
            name: "{{ item.name }}-rb"
            namespace: "{{ item.name }}"
          subjects:
            - kind: User
              apiGroup: rbac.authorization.k8s.io
              name: "{{ item.name }}"
          roleRef:
            kind: ClusterRole
            apiGroup: rbac.authorization.k8s.io
            name: "{{ role_map[item.role] | default('view') }}"
      loop: "{{ users }}"
      loop_control:
        index_var: idx
      when:
        - not ansible_check_mode
        - (users_info.results[idx].resources | default([]) | length) > 0
